(dp0
S'pred'
p1
ctheano.compile.function_module
_constructor_Function
p2
(ctheano.compile.function_module
_constructor_FunctionMaker
p3
((dp4
S'profile'
p5
NsS'function_builder'
p6
ctheano.compile.function_module
Function
p7
sS'inputs'
p8
(lp9
ccopy_reg
_reconstructor
p10
(ctheano.compile.io
In
p11
c__builtin__
object
p12
Ntp13
Rp14
(dp15
S'name'
p16
S'x'
p17
sS'update'
p18
NsS'value'
p19
NsS'borrow'
p20
NsS'strict'
p21
I00
sS'implicit'
p22
I00
sS'mutable'
p23
I00
sS'variable'
p24
g10
(ctheano.tensor.var
TensorVariable
p25
g12
Ntp26
Rp27
(dp28
S'auto_name'
p29
S'auto_3'
p30
sS'index'
p31
NsS'tag'
p32
(itheano.gof.utils
scratchpad
p33
(dp34
S'trace'
p35
(lp36
(lp37
(S'logistic_regression.py'
p38
I34
S'<module>'
p39
S"x = T.dmatrix('x')"
p40
tp41
aasbsg16
g17
sS'owner'
p42
NsS'type'
p43
g10
(ctheano.tensor.type
TensorType
p44
g12
Ntp45
Rp46
(dp47
S'broadcastable'
p48
(I00
I00
tp49
sS'dtype'
p50
S'float64'
p51
sS'numpy_dtype'
p52
cnumpy
dtype
p53
(S'f8'
p54
I0
I1
tp55
Rp56
(I3
S'<'
p57
NNNI-1
I-1
I0
tp58
bsS'sparse_grad'
p59
I00
sg16
NsbsbsS'shared'
p60
I00
sS'allow_downcast'
p61
Nsbag10
(g11
g12
Ntp62
Rp63
(dp64
g16
Nsg18
Nsg19
g10
(ctheano.gof.link
Container
p65
g12
Ntp66
Rp67
(dp68
g16
NsS'storage'
p69
(lp70
cnumpy.core.multiarray
_reconstruct
p71
(cnumpy
ndarray
p72
(I0
tp73
S'b'
p74
tp75
Rp76
(I1
(I4
I3
tp77
g56
I00
S'\x17J\xf8\xe7\x0f\xf7q?U%\xdf\x1fM#{??\xb2\xba\n\x12_\x87\xbf\xa5\xfe\xad\x9f\xdc\xde\xa5?-\xb8uJwb\x90\xbf\xfc\xfd\xaf\xd8\x18M\x9b\xbf?\xe4-\x92\xc9\xd1\xb5\xbf\xb4i\xab+C\xd0\x9c?\xc9\xd5\xc9n\x7f\xc3\xac?\xb2\x95\x9c\x87\xdd\xa6\xa3\xbf\xe88\xe4\xf8\x9e\xee}?F\xfbg\xdb5l\x9f?'
p78
tp79
basg21
I00
sS'readonly'
p80
I00
sg43
g10
(g44
g12
Ntp81
Rp82
(dp83
g48
(I00
I00
tp84
sg50
S'float64'
p85
sg52
g56
sg59
I00
sg16
Nsbsg61
Nsbsg20
I01
sg21
I00
sg22
I01
sg23
I00
sg24
g10
(ctheano.tensor.sharedvar
TensorSharedVariable
p86
g12
Ntp87
Rp88
(dp89
g29
S'auto_5'
p90
sg31
Nsg32
(itheano.gof.utils
scratchpad
p91
(dp92
g35
(lp93
(lp94
(g38
I37
g39
S'w = theano.shared(np.random.randn(base,k))'
p95
tp96
aasbsS'container'
p97
g67
sg16
Nsg42
Nsg43
g82
sbsg60
I01
sg61
Nsbag10
(g11
g12
Ntp98
Rp99
(dp100
g16
Nsg18
Nsg19
g10
(g65
g12
Ntp101
Rp102
(dp103
g16
Nsg69
(lp104
g71
(g72
(I0
tp105
g74
tp106
Rp107
(I1
(tg56
I00
S'\x02\x9f\x81~fS\xe6\xbf'
p108
tp109
basg21
I00
sg80
I00
sg43
g10
(g44
g12
Ntp110
Rp111
(dp112
g48
(tsg50
S'float64'
p113
sg52
g56
sg59
I00
sg16
Nsbsg61
Nsbsg20
I01
sg21
I00
sg22
I01
sg23
I00
sg24
g10
(ctheano.tensor.sharedvar
ScalarSharedVariable
p114
g12
Ntp115
Rp116
(dp117
g29
S'auto_6'
p118
sg31
Nsg32
(itheano.gof.utils
scratchpad
p119
(dp120
g35
(lp121
(lp122
(g38
I38
g39
S'b = theano.shared(0.0)'
p123
tp124
aasbsg97
g102
sg16
Nsg42
Nsg43
g111
sbsg60
I01
sg61
NsbasS'fgraph'
p125
g10
(ctheano.gof.fg
FunctionGraph
p126
g12
Ntp127
Rp128
(dp129
g5
Nsg8
(lp130
g10
(g25
g12
Ntp131
Rp132
(dp133
g31
Nsg16
g17
sg125
g128
sS'clients'
p134
(lp135
(g10
(ctheano.gof.graph
Apply
p136
g12
Ntp137
Rp138
(dp139
g8
(lp140
g132
ag10
(g86
g12
Ntp141
Rp142
(dp143
g31
Nsg97
g67
sg16
Nsg125
g128
sg134
(lp144
(g138
I1
tp145
asg29
S'auto_2193'
p146
sg32
(itheano.gof.utils
scratchpad
p147
(dp148
g35
g93
sbsg42
Nsg43
g82
sbasg125
g128
sS'outputs'
p149
(lp150
g10
(g25
g12
Ntp151
Rp152
(dp153
g31
I0
sg16
Nsg125
g128
sg134
(lp154
(g10
(g136
g12
Ntp155
Rp156
(dp157
g8
(lp158
g152
ag10
(g25
g12
Ntp159
Rp160
(dp161
g31
I0
sg16
Nsg125
g128
sg134
(lp162
(g156
I1
tp163
asg29
S'auto_2300'
p164
sg32
(itheano.gof.utils
scratchpad
p165
(dp166
g35
(lp167
(lp168
(g38
I39
g39
S'o = x.dot(w)+b'
p169
tp170
aasbsg42
g10
(g136
g12
Ntp171
Rp172
(dp173
g8
(lp174
g10
(g114
g12
Ntp175
Rp176
(dp177
g31
Nsg97
g102
sg16
Nsg125
g128
sg134
(lp178
(g172
I0
tp179
asg29
S'auto_2194'
p180
sg32
(itheano.gof.utils
scratchpad
p181
(dp182
g35
g121
sbsg42
Nsg43
g111
sbasg125
g128
sg149
(lp183
g160
asg32
(itheano.gof.utils
scratchpad
p184
(dp185
bsS'deps'
p186
(dp187
sS'op'
p188
g10
(ctheano.tensor.elemwise
DimShuffle
p189
g12
Ntp190
Rp191
(dp192
S'drop'
p193
(lp194
sS'shuffle'
p195
(lp196
sS'augment'
p197
(lp198
I0
aI1
asS'input_broadcastable'
p199
(tsS'inplace'
p200
I01
sS'new_order'
p201
(g17
g17
tp202
sS'view_map'
p203
(dp204
I0
(lp205
I0
assS'_op_use_c_code'
p206
S'/usr/bin/clang++'
p207
sbsbsg43
g10
(g44
g12
Ntp208
Rp209
(dp210
g48
(I01
I01
tp211
sg50
g113
sg52
g56
sg59
I00
sg16
Nsbsbasg32
(itheano.gof.utils
scratchpad
p212
(dp213
bsg186
(dp214
sg125
g128
sg149
(lp215
g10
(g25
g12
Ntp216
Rp217
(dp218
g31
I0
sg16
Nsg125
g128
sg134
(lp219
(g10
(g136
g12
Ntp220
Rp221
(dp222
g8
(lp223
g217
ag10
(ctheano.tensor.var
TensorConstant
p224
g12
Ntp225
Rp226
(dp227
g31
Nsg16
Nsg125
g128
sg43
g10
(g44
g12
Ntp228
Rp229
(dp230
g48
(I01
tp231
sg50
S'int64'
p232
sg52
g53
(S'i8'
p233
I0
I1
tp234
Rp235
(I3
S'<'
p236
NNNI-1
I-1
I0
tp237
bsg59
I00
sg16
Nsbsg134
(lp238
(g221
I1
tp239
asg29
S'auto_2294'
p240
sg32
(itheano.gof.utils
scratchpad
p241
(dp242
S'unique_value'
p243
cnumpy.core.multiarray
scalar
p244
(g235
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p245
tp246
Rp247
sbsS'data'
p248
g71
(g72
(I0
tp249
g74
tp250
Rp251
(I1
(I1
tp252
g235
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p253
tp254
bsbasg125
g128
sg149
(lp255
g10
(g25
g12
Ntp256
Rp257
(dp258
g31
I0
sg16
S'max'
p259
sg125
g128
sg134
(lp260
sg29
S'auto_2295'
p261
sg32
(itheano.gof.utils
scratchpad
p262
(dp263
g35
(lp264
(lp265
(g38
I42
g39
S'prediction = p_1.argmax(axis=1,keepdims=True)'
p266
tp267
aasbsg42
g221
sg43
g10
(g44
g12
Ntp268
Rp269
(dp270
g48
(I00
tp271
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsbag10
(g25
g12
Ntp272
Rp273
(dp274
g31
I1
sg16
S'argmax'
p275
sg125
g128
sg134
(lp276
(g10
(g136
g12
Ntp277
Rp278
(dp279
g8
(lp280
g273
asg125
g128
sg149
(lp281
g10
(g25
g12
Ntp282
Rp283
(dp284
g31
I0
sg16
Nsg125
g128
sg134
(lp285
(S'output'
p286
I0
tp287
asg29
S'auto_2301'
p288
sg32
(itheano.gof.utils
scratchpad
p289
(dp290
g35
(lp291
(lp292
(g38
I42
g39
S'prediction = p_1.argmax(axis=1,keepdims=True)'
p293
tp294
aasbsg42
g278
sg43
g10
(g44
g12
Ntp295
Rp296
(dp297
g48
(I00
I01
tp298
sg50
S'int64'
p299
sg52
g235
sg59
I00
sg16
Nsbsbasg32
(itheano.gof.utils
scratchpad
p300
(dp301
bsg186
(dp302
sg188
g10
(g189
g12
Ntp303
Rp304
(dp305
g193
(lp306
sg195
(lp307
I0
asg197
(lp308
I1
asg199
(I00
tp309
sg200
I01
sg201
(I0
g17
tp310
sg203
(dp311
I0
(lp312
I0
assg206
g207
sbsbI0
tp313
asg29
S'auto_2296'
p314
sg32
(itheano.gof.utils
scratchpad
p315
(dp316
g35
(lp317
g265
asbsg42
g221
sg43
g10
(g44
g12
Ntp318
Rp319
(dp320
g48
(I00
tp321
sg50
g299
sg52
g235
sg59
I00
sg16
Nsbsbasg32
(itheano.gof.utils
scratchpad
p322
(dp323
bsg186
(dp324
sg188
g10
(ctheano.tensor.basic
MaxAndArgmax
p325
g12
Ntp326
Rp327
(dp328
g206
g207
sbsbI0
tp329
asg29
S'auto_2305'
p330
sg32
(itheano.gof.utils
scratchpad
p331
(dp332
g35
(lp333
sbsg42
g156
sg43
g10
(g44
g12
Ntp334
Rp335
(dp336
g48
(I00
I00
tp337
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsbasg188
g10
(ctheano.tensor.elemwise
Elemwise
p338
g12
Ntp339
Rp340
(dp341
g16
NsS'scalar_op'
p342
g10
(ctheano.scalar.basic
Add
p343
g12
Ntp344
Rp345
(dp346
S'output_types_preference'
p347
g10
(ctheano.scalar.basic
transfer_type
p348
g12
Ntp349
Rp350
(dp351
S'transfer'
p352
(I0
tp353
sbsg206
g207
sg16
NsbsS'destroy_map'
p354
(dp355
I0
(lp356
I0
assS'nfunc_spec'
p357
(S'add'
p358
I2
I1
tp359
sS'inplace_pattern'
p360
(dp361
I0
I0
ssS'openmp'
p362
I00
sg206
g207
sbsbI0
tp363
asg29
S'auto_2274'
p364
sg32
(itheano.gof.utils
scratchpad
p365
(dp366
g35
(lp367
sbsg42
g138
sg43
g10
(g44
g12
Ntp368
Rp369
(dp370
g48
(I00
I00
tp371
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsbasg32
(itheano.gof.utils
scratchpad
p372
(dp373
bsg186
(dp374
sg188
g10
(ctheano.tensor.blas
Dot22
p375
g12
Ntp376
Rp377
(dp378
g206
g207
sbsbI0
tp379
asg29
S'auto_2192'
p380
sg32
(itheano.gof.utils
scratchpad
p381
(dp382
g35
g36
sbsg42
Nsg43
g46
sbag142
ag176
asS'change_tracker'
p383
(itheano.gof.opt
ChangeTracker
p384
(dp385
S'changed'
p386
I00
sS'nb_imported'
p387
I0
sbsg149
(lp388
g283
asS'update_mapping'
p389
(dp390
sS'merge_feature'
p391
g10
(ctheano.gof.opt
MergeFeature
p392
g12
Ntp393
Rp394
(dp395
S'scheduled'
p396
(lp397
sS'nodes_seen'
p398
c__builtin__
set
p399
((lp400
g156
ag172
ag138
ag278
ag221
atp401
Rp402
sS'const_sig_inv'
p403
(itheano.gof.opt
_metadict
p404
(dp405
S'd'
p406
(dp407
sS'l'
p408
(lp409
sbsS'noinput_nodes'
p410
g10
(ctheano.misc.ordered_set
OrderedSet
p411
g12
Ntp412
Rp413
(dp414
S'_OrderedSet__root'
p415
g10
(ctheano.misc.ordered_set
Link
p416
g12
Ntp417
Rp418
(lp419
g418
ag418
absS'_OrderedSet__map'
p420
(dp421
sbsS'blacklist'
p422
(lp423
sS'seen_constants'
p424
g399
((lp425
tp426
Rp427
sS'const_sig'
p428
(itheano.gof.opt
_metadict
p429
(dp430
g406
(dp431
sg408
(lp432
sbsbsS'destroy_handler'
p433
g10
(ctheano.gof.destroyhandler
DestroyHandler
p434
g12
Ntp435
Rp436
(dp437
S'impact'
p438
(dp439
g152
g10
(g411
g12
Ntp440
Rp441
(dp442
g415
g10
(g416
g12
Ntp443
Rp444
(lp445
g10
(g416
g12
Ntp446
Rp447
(lp448
g444
ag444
ag152
abag447
absg420
(dp449
g152
g447
ssbssS'droot'
p450
(dp451
g152
g152
ssS'view_o'
p452
ccollections
OrderedDict
p453
((lp454
(lp455
g176
ag10
(g411
g12
Ntp456
Rp457
(dp458
g415
g10
(g416
g12
Ntp459
Rp460
(lp461
g10
(g416
g12
Ntp462
Rp463
(lp464
g460
ag460
ag160
abag463
absg420
(dp465
g160
g463
ssbaa(lp466
g273
ag10
(g411
g12
Ntp467
Rp468
(dp469
g415
g10
(g416
g12
Ntp470
Rp471
(lp472
g10
(g416
g12
Ntp473
Rp474
(lp475
g471
ag471
ag283
abag474
absg420
(dp476
g283
g474
ssbaatp477
Rp478
sS'view_i'
p479
g453
((lp480
(lp481
g160
ag176
aa(lp482
g283
ag273
aatp483
Rp484
sg125
g128
sS'do_imports_on_attach'
p485
I01
sg134
g453
((lp486
(lp487
g176
ag453
((lp488
(lp489
g172
aI1
aatp490
Rp491
aa(lp492
g10
(g25
g12
Ntp493
Rp494
(dp495
g31
I0
sg16
Nsg125
g128
sg134
(lp496
sg29
S'auto_2195'
p497
sg32
(itheano.gof.utils
scratchpad
p498
(dp499
g35
(lp500
g168
asbsg42
g10
(g136
g12
Ntp501
Rp502
(dp503
g8
(lp504
g176
asg125
g128
sg149
(lp505
g494
asg32
(itheano.gof.utils
scratchpad
p506
(dp507
bsg186
(dp508
sg188
g10
(g189
g12
Ntp509
Rp510
(dp511
g193
(lp512
sg195
(lp513
sg197
(lp514
I0
aI1
asg199
(tsg200
I00
sg201
g202
sg206
g207
sbsbsg43
g10
(g44
g12
Ntp515
Rp516
(dp517
g48
(I01
I01
tp518
sg50
g113
sg52
g56
sg59
I00
sg16
Nsbsbag453
((lp519
tp520
Rp521
aa(lp522
g132
ag453
((lp523
(lp524
g138
aI1
aatp525
Rp526
aa(lp527
g142
ag453
((lp528
(lp529
g138
aI1
aatp530
Rp531
aa(lp532
g152
ag453
((lp533
(lp534
g156
aI1
aatp535
Rp536
aa(lp537
g10
(g25
g12
Ntp538
Rp539
(dp540
g31
I0
sg16
Nsg125
g128
sg134
(lp541
sg29
S'auto_2200'
p542
sg32
(itheano.gof.utils
scratchpad
p543
(dp544
g35
(lp545
(lp546
(g38
I39
g39
S'o = x.dot(w)+b'
p547
tp548
aasbsg42
g10
(g136
g12
Ntp549
Rp550
(dp551
g8
(lp552
g152
ag160
asg125
g128
sg149
(lp553
g539
asg32
(itheano.gof.utils
scratchpad
p554
(dp555
bsg186
(dp556
sg188
g10
(g338
g12
Ntp557
Rp558
(dp559
S'__module__'
p560
S'tensor'
p561
sg342
g10
(g343
g12
Ntp562
Rp563
(dp564
g347
ctheano.scalar.basic
upcast_out
p565
sg206
g207
sg16
S'add'
p566
sbsg16
S'Elemwise{add,no_inplace}'
p567
sg206
g207
sg354
(dp568
sg357
g359
sg360
(dp569
sg362
I00
sS'__doc__'
p570
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p571
sbsbsg43
g10
(g44
g12
Ntp572
Rp573
(dp574
g48
(I00
I00
tp575
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsbag453
((lp576
tp577
Rp578
aa(lp579
g226
ag453
((lp580
(lp581
g221
aI1
aatp582
Rp583
aa(lp584
g257
ag453
((lp585
tp586
Rp587
aa(lp588
g273
ag453
((lp589
(lp590
g278
aI1
aatp591
Rp592
aa(lp593
g10
(g25
g12
Ntp594
Rp595
(dp596
g31
I0
sg16
Nsg125
g128
sg134
(lp597
sg29
S'auto_2208'
p598
sg32
(itheano.gof.utils
scratchpad
p599
(dp600
g35
(lp601
g292
asbsg42
g10
(g136
g12
Ntp602
Rp603
(dp604
g8
(lp605
g273
asg125
g128
sg149
(lp606
g595
asg32
(itheano.gof.utils
scratchpad
p607
(dp608
bsg186
(dp609
sg188
g10
(g189
g12
Ntp610
Rp611
(dp612
g193
(lp613
sg195
(lp614
I0
asg197
(lp615
I1
asg199
g309
sg200
I00
sg201
g310
sg206
g207
sbsbsg43
g10
(g44
g12
Ntp616
Rp617
(dp618
g48
(I00
I01
tp619
sg50
g299
sg52
g235
sg59
I00
sg16
Nsbsbag453
((lp620
tp621
Rp622
aa(lp623
g10
(g25
g12
Ntp624
Rp625
(dp626
g31
I0
sg16
Nsg125
g128
sg134
(lp627
sg29
S'auto_2299'
p628
sg32
(itheano.gof.utils
scratchpad
p629
(dp630
g35
(lp631
sbsg42
g10
(g136
g12
Ntp632
Rp633
(dp634
g8
(lp635
g595
asg125
g128
sg149
(lp636
g625
asg32
(itheano.gof.utils
scratchpad
p637
(dp638
bsg186
(dp639
sg188
g10
(ctheano.compile.ops
OutputGuard
p640
g12
Ntp641
Rp642
(dp643
g206
g207
sbsbsg43
g617
sbag453
((lp644
tp645
Rp646
aa(lp647
g160
ag453
((lp648
(lp649
g156
aI1
aatp650
Rp651
aa(lp652
g283
ag453
((lp653
tp654
Rp655
aa(lp656
g217
ag453
((lp657
(lp658
g221
aI1
aatp659
Rp660
aatp661
Rp662
sS'root_destroyer'
p663
(dp664
g152
g156
ssS'debug_all_apps'
p665
g10
(g411
g12
Ntp666
Rp667
(dp668
g415
g10
(g416
g12
Ntp669
Rp670
(lp671
g10
(g416
g12
Ntp672
Rp673
(lp674
g10
(g416
g12
Ntp675
Rp676
(lp677
g10
(g416
g12
Ntp678
Rp679
(lp680
g10
(g416
g12
Ntp681
Rp682
(lp683
g10
(g416
g12
Ntp684
Rp685
(lp686
g670
ag682
ag138
abag679
ag221
abag676
ag172
abag673
ag278
abag670
ag156
abag685
absg420
(dp687
g156
g673
sg172
g679
sg138
g685
sg278
g676
sg221
g682
ssbsS'destroyers'
p688
g10
(g411
g12
Ntp689
Rp690
(dp691
g415
g10
(g416
g12
Ntp692
Rp693
(lp694
g10
(g416
g12
Ntp695
Rp696
(lp697
g693
ag693
ag156
abag696
absg420
(dp698
g156
g696
ssbsS'stale_droot'
p699
I00
sbsg16
S'logistic_regression.py:51'
p700
sS'execute_callbacks_time'
p701
F0.0219419002532959
sS'shape_feature'
p702
g10
(ctheano.tensor.opt
ShapeFeature
p703
g12
Ntp704
Rp705
(dp706
g396
(dp707
sS'shape_of'
p708
(dp709
g10
(g25
g12
Ntp710
Rp711
(dp712
g31
I0
sg16
Nsg125
g128
sg134
(lp713
sg29
S'auto_2237'
p714
sg32
(itheano.gof.utils
scratchpad
p715
(dp716
g35
(lp717
(lp718
(g38
I40
g39
S'p_1 = 1/(1+T.exp(-o))'
p719
tp720
aasbsg42
g10
(g136
g12
Ntp721
Rp722
(dp723
g8
(lp724
g10
(g224
g12
Ntp725
Rp726
(dp727
g29
S'auto_2259'
p728
sg31
Nsg32
(itheano.gof.utils
scratchpad
p729
(dp730
g35
(lp731
sg243
g244
(g56
S'\x00\x00\x00\x00\x00\x00\xf0?'
p732
tp733
Rp734
sbsg16
Nsg43
g10
(g44
g12
Ntp735
Rp736
(dp737
g48
(I01
I01
tp738
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsg134
(lp739
sg248
g71
(g72
(I0
tp740
g74
tp741
Rp742
(I1
(I1
I1
tp743
g56
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p744
tp745
bsbag10
(g25
g12
Ntp746
Rp747
(dp748
g31
I0
sg16
Nsg125
g128
sg134
(lp749
sg29
S'auto_2202'
p750
sg32
(itheano.gof.utils
scratchpad
p751
(dp752
g35
(lp753
(lp754
(g38
I40
g39
S'p_1 = 1/(1+T.exp(-o))'
p755
tp756
aasbsg42
g10
(g136
g12
Ntp757
Rp758
(dp759
g8
(lp760
g10
(g25
g12
Ntp761
Rp762
(dp763
g31
I0
sg16
Nsg125
g128
sg134
(lp764
sg29
S'auto_2247'
p765
sg32
(itheano.gof.utils
scratchpad
p766
(dp767
g35
(lp768
sbsg42
g10
(g136
g12
Ntp769
Rp770
(dp771
g8
(lp772
g10
(g224
g12
Ntp773
Rp774
(dp775
g29
S'auto_2251'
p776
sg31
Nsg32
(itheano.gof.utils
scratchpad
p777
(dp778
g35
(lp779
sg243
g244
(g56
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
p780
tp781
Rp782
sbsg16
Nsg43
g10
(g44
g12
Ntp783
Rp784
(dp785
g48
(I01
I01
tp786
sg50
S'float64'
p787
sg52
g56
sg59
I00
sg16
Nsbsg134
(lp788
sg248
g71
(g72
(I0
tp789
g74
tp790
Rp791
(I1
(I1
I1
tp792
g56
I00
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
p793
tp794
bsbag539
asg125
g128
sg149
(lp795
g762
asg32
(itheano.gof.utils
scratchpad
p796
(dp797
bsg186
(dp798
sg188
g10
(g338
g12
Ntp799
Rp800
(dp801
g560
g561
sg342
g10
(ctheano.scalar.basic
Mul
p802
g12
Ntp803
Rp804
(dp805
g347
g565
sg206
g207
sg16
S'mul'
p806
sbsg16
S'Elemwise{mul,no_inplace}'
p807
sg206
g207
sg354
(dp808
sg357
(S'multiply'
p809
I2
I1
tp810
sg360
(dp811
sg362
I00
sg570
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p812
sbsbsg43
g10
(g44
g12
Ntp813
Rp814
(dp815
g48
(I00
I00
tp816
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsbasg125
g128
sg149
(lp817
g747
asg32
(itheano.gof.utils
scratchpad
p818
(dp819
bsg186
(dp820
sg188
g10
(g338
g12
Ntp821
Rp822
(dp823
g560
g561
sg342
g10
(ctheano.scalar.basic
Exp
p824
g12
Ntp825
Rp826
(dp827
g347
ctheano.scalar.basic
upgrade_to_float
p828
sg206
g207
sg16
S'exp'
p829
sbsg16
S'Elemwise{exp,no_inplace}'
p830
sg206
g207
sg354
(dp831
sg357
(S'exp'
p832
I1
I1
tp833
sg360
(dp834
sg362
I00
sg570
S"e^`a`\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p835
sbsbsg43
g10
(g44
g12
Ntp836
Rp837
(dp838
g48
(I00
I00
tp839
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsbasg125
g128
sg149
(lp840
g711
asg32
(itheano.gof.utils
scratchpad
p841
(dp842
bsg186
(dp843
sg188
g558
sbsg43
g10
(g44
g12
Ntp844
Rp845
(dp846
g48
(I00
I00
tp847
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsb(g10
(g25
g12
Ntp848
Rp849
(dp850
g29
S'auto_2210'
p851
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p852
(dp853
g35
(lp854
sbsg16
Nsg42
g10
(g136
g12
Ntp855
Rp856
(dp857
g8
(lp858
g132
asg32
(itheano.gof.utils
scratchpad
p859
(dp860
bsg149
(lp861
g849
asg188
g10
(ctheano.compile.ops
Shape_i
p862
g12
Ntp863
Rp864
(dp865
S'i'
p866
I0
sg206
g207
sbsbsg43
g10
(g44
g12
Ntp867
Rp868
(dp869
g48
(tsg50
g299
sg52
g235
sg59
I00
sg16
Nsbsbg10
(g25
g12
Ntp870
Rp871
(dp872
g29
S'auto_2213'
p873
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p874
(dp875
g35
(lp876
sbsg16
Nsg42
g10
(g136
g12
Ntp877
Rp878
(dp879
g8
(lp880
g142
asg32
(itheano.gof.utils
scratchpad
p881
(dp882
bsg149
(lp883
g871
asg188
g10
(g862
g12
Ntp884
Rp885
(dp886
g866
I1
sg206
g207
sbsbsg43
g868
sbtp887
sg142
(g10
(g25
g12
Ntp888
Rp889
(dp890
g29
S'auto_2212'
p891
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p892
(dp893
g35
(lp894
sbsg16
Nsg42
g10
(g136
g12
Ntp895
Rp896
(dp897
g8
(lp898
g142
asg32
(itheano.gof.utils
scratchpad
p899
(dp900
bsg149
(lp901
g889
asg188
g10
(g862
g12
Ntp902
Rp903
(dp904
g866
I0
sg206
g207
sbsbsg43
g868
sbg871
tp905
sg10
(g25
g12
Ntp906
Rp907
(dp908
g31
I0
sg16
Nsg125
g128
sg134
(lp909
sg29
S'auto_2269'
p910
sg32
(itheano.gof.utils
scratchpad
p911
(dp912
g35
(lp913
sbsg42
g10
(g136
g12
Ntp914
Rp915
(dp916
g8
(lp917
g10
(g25
g12
Ntp918
Rp919
(dp920
g31
I0
sg16
Nsg125
g128
sg134
(lp921
sg29
S'auto_2266'
p922
sg32
(itheano.gof.utils
scratchpad
p923
(dp924
g35
(lp925
sbsg42
g10
(g136
g12
Ntp926
Rp927
(dp928
g8
(lp929
g10
(g25
g12
Ntp930
Rp931
(dp932
g31
I0
sg16
Nsg125
g128
sg134
(lp933
sg29
S'auto_2293'
p934
sg32
(itheano.gof.utils
scratchpad
p935
(dp936
g35
(lp937
sbsg42
g10
(g136
g12
Ntp938
Rp939
(dp940
g8
(lp941
g539
asg125
g128
sg149
(lp942
g931
asg32
(itheano.gof.utils
scratchpad
p943
(dp944
bsg186
(dp945
sg188
g10
(g338
g12
Ntp946
Rp947
(dp948
g560
g561
sg342
g10
(ctheano.scalar.basic
Neg
p949
g12
Ntp950
Rp951
(dp952
g347
ctheano.scalar.basic
same_out
p953
sg206
g207
sg16
S'neg'
p954
sbsg16
S'Elemwise{neg,no_inplace}'
p955
sg206
g207
sg354
(dp956
sg357
(S'negative'
p957
I1
I1
tp958
sg360
(dp959
sg362
I00
sg570
S"-a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p960
sbsbsg43
g10
(g44
g12
Ntp961
Rp962
(dp963
g48
(I00
I00
tp964
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsbasg125
g128
sg149
(lp965
g919
asg32
(itheano.gof.utils
scratchpad
p966
(dp967
bsg186
(dp968
sg188
g947
sbsg43
g10
(g44
g12
Ntp969
Rp970
(dp971
g48
(I00
I00
tp972
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsbasg125
g128
sg149
(lp973
g907
asg32
(itheano.gof.utils
scratchpad
p974
(dp975
bsg186
(dp976
sg188
g10
(g338
g12
Ntp977
Rp978
(dp979
g16
S'sigmoid'
p980
sg342
g10
(ctheano.tensor.nnet.sigm
ScalarSigmoid
p981
g12
Ntp982
Rp983
(dp984
g347
g828
sg206
g207
sg16
S'scalar_sigmoid'
p985
sbsg354
(dp986
sg357
Nsg360
(dp987
sg362
I00
sg206
g207
sbsbsg43
g10
(g44
g12
Ntp988
Rp989
(dp990
g48
(I00
I00
tp991
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsb(g849
g871
tp992
sg176
(tsg10
(g25
g12
Ntp993
Rp994
(dp995
g31
I0
sg16
Nsg125
g128
sg134
(lp996
sg29
S'auto_2238'
p997
sg32
(itheano.gof.utils
scratchpad
p998
(dp999
g35
(lp1000
sbsg42
g10
(g136
g12
Ntp1001
Rp1002
(dp1003
g8
(lp1004
g10
(g224
g12
Ntp1005
Rp1006
(dp1007
g29
S'auto_2197'
p1008
sg31
Nsg32
(itheano.gof.utils
scratchpad
p1009
(dp1010
g243
Nsbsg16
Nsg43
g10
(g44
g12
Ntp1011
Rp1012
(dp1013
g48
(tsg50
S'int8'
p1014
sg52
g53
(S'i1'
p1015
I0
I1
tp1016
Rp1017
(I3
S'|'
p1018
NNNI-1
I-1
I0
tp1019
bsg59
I00
sg16
Nsbsg134
(lp1020
sg248
g71
(g72
(I0
tp1021
g74
tp1022
Rp1023
(I1
(tg1017
I00
S'\x01'
p1024
tp1025
bsbasg125
g128
sg149
(lp1026
g994
asg32
(itheano.gof.utils
scratchpad
p1027
(dp1028
bsg186
(dp1029
sg188
g10
(g189
g12
Ntp1030
Rp1031
(dp1032
g193
(lp1033
sg195
(lp1034
sg197
(lp1035
I0
aI1
asg199
(tsg200
I00
sg201
(g17
g17
tp1036
sg206
g207
sbsbsg43
g10
(g44
g12
Ntp1037
Rp1038
(dp1039
g48
(I01
I01
tp1040
sg50
g1014
sg52
g1017
sg59
I00
sg16
Nsbsb(g10
(g224
g12
Ntp1041
Rp1042
(dp1043
g29
S'auto_2209'
p1044
sg31
Nsg32
(itheano.gof.utils
scratchpad
p1045
(dp1046
g243
Nsbsg16
Nsg43
g10
(g44
g12
Ntp1047
Rp1048
(dp1049
g48
(tsg50
S'int64'
p1050
sg52
g235
sg59
I00
sg16
Nsbsg248
g71
(g72
(I0
tp1051
g74
tp1052
Rp1053
(I1
(tg235
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p1054
tp1055
bsbg1042
tp1056
sg257
(g849
tp1057
sg10
(g25
g12
Ntp1058
Rp1059
(dp1060
g31
I0
sg16
Nsg125
g128
sg134
(lp1061
sg29
S'auto_2224'
p1062
sg32
(itheano.gof.utils
scratchpad
p1063
(dp1064
g35
(lp1065
sbsg42
g10
(g136
g12
Ntp1066
Rp1067
(dp1068
g8
(lp1069
g1006
asg125
g128
sg149
(lp1070
g1059
asg32
(itheano.gof.utils
scratchpad
p1071
(dp1072
bsg186
(dp1073
sg188
g10
(g189
g12
Ntp1074
Rp1075
(dp1076
g193
(lp1077
sg195
(lp1078
sg197
(lp1079
I0
aI1
asg199
(tsg200
I00
sg201
(g17
g17
tp1080
sg206
g207
sbsbsg43
g10
(g44
g12
Ntp1081
Rp1082
(dp1083
g48
(I01
I01
tp1084
sg50
g1014
sg52
g1017
sg59
I00
sg16
Nsbsb(g1042
g1042
tp1085
sg774
(g1042
g1042
tp1086
sg10
(g25
g12
Ntp1087
Rp1088
(dp1089
g31
I0
sg16
Nsg125
g128
sg134
(lp1090
sg29
S'auto_2196'
p1091
sg32
(itheano.gof.utils
scratchpad
p1092
(dp1093
g35
(lp1094
(lp1095
(g38
I39
g39
S'o = x.dot(w)+b'
p1096
tp1097
aasbsg42
g10
(g136
g12
Ntp1098
Rp1099
(dp1100
g8
(lp1101
g132
ag142
asg125
g128
sg149
(lp1102
g1088
asg32
(itheano.gof.utils
scratchpad
p1103
(dp1104
bsg186
(dp1105
sg188
g10
(ctheano.tensor.basic
Dot
p1106
g12
Ntp1107
Rp1108
(dp1109
g206
g207
sbsbsg43
g10
(g44
g12
Ntp1110
Rp1111
(dp1112
g48
(I00
I00
tp1113
sg50
S'float64'
p1114
sg52
g56
sg59
I00
sg16
Nsbsb(g849
g871
tp1115
sg10
(g25
g12
Ntp1116
Rp1117
(dp1118
g31
I0
sg16
Nsg125
g128
sg134
(lp1119
sg29
S'auto_2223'
p1120
sg32
(itheano.gof.utils
scratchpad
p1121
(dp1122
g35
(lp1123
(lp1124
(g38
I40
g39
S'p_1 = 1/(1+T.exp(-o))'
p1125
tp1126
aasbsg42
g10
(g136
g12
Ntp1127
Rp1128
(dp1129
g8
(lp1130
g726
ag711
asg125
g128
sg149
(lp1131
g1117
asg32
(itheano.gof.utils
scratchpad
p1132
(dp1133
bsg186
(dp1134
sg188
g10
(g338
g12
Ntp1135
Rp1136
(dp1137
g560
g561
sg342
g10
(ctheano.scalar.basic
TrueDiv
p1138
g12
Ntp1139
Rp1140
(dp1141
g347
g565
sg206
g207
sg16
S'true_div'
p1142
sbsg16
S'Elemwise{true_div,no_inplace}'
p1143
sg206
g207
sg354
(dp1144
sg357
(S'true_divide'
p1145
I2
I1
tp1146
sg360
(dp1147
sg362
I00
sg570
S"elementwise [true] division (inverse of multiplication)\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Examples\n    --------\n    Elemwise(add) # represents + on tensors (x + y)\n    Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n    Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n    Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n    # along the first dimension to match the first input\n    Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n    # second dimension\n    Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n    Elemwise(log)(rand(3, 4, 5))\n\n    "
p1148
sbsbsg43
g10
(g44
g12
Ntp1149
Rp1150
(dp1151
g48
(I00
I00
tp1152
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsb(g849
g871
tp1153
sg919
(g849
g871
tp1154
sg10
(g224
g12
Ntp1155
Rp1156
(dp1157
g29
S'auto_2254'
p1158
sg31
Nsg32
(itheano.gof.utils
scratchpad
p1159
(dp1160
g35
(lp1161
(lp1162
(g38
I40
g39
S'p_1 = 1/(1+T.exp(-o))'
p1163
tp1164
aasg243
g244
(g1017
g1024
tp1165
Rp1166
sbsg16
Nsg43
g10
(g44
g12
Ntp1167
Rp1168
(dp1169
g48
(I01
I01
tp1170
sg50
g1014
sg52
g1017
sg59
I00
sg16
Nsbsg134
(lp1171
sg248
g71
(g72
(I0
tp1172
g74
tp1173
Rp1174
(I1
(I1
I1
tp1175
g1017
I00
g1024
tp1176
bsb(g1042
g1042
tp1177
sg1006
(tsg10
(g25
g12
Ntp1178
Rp1179
(dp1180
g31
I0
sg16
Nsg125
g128
sg134
(lp1181
sg29
S'auto_2198'
p1182
sg32
(itheano.gof.utils
scratchpad
p1183
(dp1184
g35
(lp1185
g1162
asbsg42
g10
(g136
g12
Ntp1186
Rp1187
(dp1188
g8
(lp1189
g1006
asg125
g128
sg149
(lp1190
g1179
asg32
(itheano.gof.utils
scratchpad
p1191
(dp1192
bsg186
(dp1193
sg188
g10
(g189
g12
Ntp1194
Rp1195
(dp1196
g193
(lp1197
sg195
(lp1198
sg197
(lp1199
I0
aI1
asg199
(tsg200
I00
sg201
(g17
g17
tp1200
sg206
g207
sbsbsg43
g1168
sb(g1042
g1042
tp1201
sg10
(g224
g12
Ntp1202
Rp1203
(dp1204
g29
S'auto_2205'
p1205
sg31
Nsg32
(itheano.gof.utils
scratchpad
p1206
(dp1207
g243
g244
(g235
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p1208
tp1209
Rp1210
sbsg16
Nsg43
g10
(g44
g12
Ntp1211
Rp1212
(dp1213
g48
(I01
tp1214
sg50
S'int64'
p1215
sg52
g235
sg59
I00
sg16
Nsbsg134
(lp1216
sg248
g71
(g72
(I0
tp1217
g74
tp1218
Rp1219
(I1
(I1
tp1220
g235
I00
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p1221
tp1222
bsb(g1042
tp1223
sg625
(g849
g1042
tp1224
sg10
(g25
g12
Ntp1225
Rp1226
(dp1227
g31
I0
sg16
Nsg125
g128
sg134
(lp1228
sg29
S'auto_2204'
p1229
sg32
(itheano.gof.utils
scratchpad
p1230
(dp1231
g35
(lp1232
g1124
asbsg42
g10
(g136
g12
Ntp1233
Rp1234
(dp1235
g8
(lp1236
g1179
ag10
(g25
g12
Ntp1237
Rp1238
(dp1239
g31
I0
sg16
Nsg125
g128
sg134
(lp1240
sg29
S'auto_2203'
p1241
sg32
(itheano.gof.utils
scratchpad
p1242
(dp1243
g35
(lp1244
g718
asbsg42
g10
(g136
g12
Ntp1245
Rp1246
(dp1247
g8
(lp1248
g1179
ag747
asg125
g128
sg149
(lp1249
g1238
asg32
(itheano.gof.utils
scratchpad
p1250
(dp1251
bsg186
(dp1252
sg188
g558
sbsg43
g10
(g44
g12
Ntp1253
Rp1254
(dp1255
g48
(I00
I00
tp1256
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsbasg125
g128
sg149
(lp1257
g1226
asg32
(itheano.gof.utils
scratchpad
p1258
(dp1259
bsg186
(dp1260
sg188
g1136
sbsg43
g10
(g44
g12
Ntp1261
Rp1262
(dp1263
g48
(I00
I00
tp1264
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsb(g849
g871
tp1265
sg160
(g1042
g1042
tp1266
sg10
(g224
g12
Ntp1267
Rp1268
(dp1269
g29
S'auto_2242'
p1270
sg31
Nsg32
(itheano.gof.utils
scratchpad
p1271
(dp1272
g243
Nsbsg16
Nsg43
g10
(g44
g12
Ntp1273
Rp1274
(dp1275
g48
(tsg50
g787
sg52
g56
sg59
I00
sg16
Nsbsg134
(lp1276
sg248
g71
(g72
(I0
tp1277
g74
tp1278
Rp1279
(I1
(tg56
I00
S'\x00\x00\x00\x00\x00\x00\xf0\xbf'
p1280
tp1281
bsb(tsg10
(g25
g12
Ntp1282
Rp1283
(dp1284
g31
I0
sg16
Nsg125
g128
sg134
(lp1285
sg29
S'auto_2227'
p1286
sg32
(itheano.gof.utils
scratchpad
p1287
(dp1288
g35
(lp1289
sbsg42
g10
(g136
g12
Ntp1290
Rp1291
(dp1292
g8
(lp1293
g1156
asg125
g128
sg149
(lp1294
g1283
asg32
(itheano.gof.utils
scratchpad
p1295
(dp1296
bsg186
(dp1297
sg188
g10
(g338
g12
Ntp1298
Rp1299
(dp1300
g560
S'tensor.basic'
p1301
sg16
Nsg342
g10
(ctheano.scalar.basic
Cast
p1302
g12
Ntp1303
Rp1304
(dp1305
g347
g10
(ctheano.scalar.basic
specific_out
p1306
g12
Ntp1307
Rp1308
(dp1309
S'spec'
p1310
(g10
(ctheano.scalar.basic
Scalar
p1311
g12
Ntp1312
Rp1313
(dp1314
g50
g51
sbtp1315
sbsg206
g207
sS'o_type'
p1316
g1313
sg16
S'convert_to_float64'
p1317
sS'ctor'
p1318
cnumpy
float64
p1319
sbsg354
(dp1320
sg357
Nsg360
(dp1321
sS'__oplist_tags'
p1322
(lp1323
S'casting'
p1324
asg362
I00
sg206
g207
sbsbsg43
g736
sb(g1042
g1042
tp1325
sg726
(g1042
g1042
tp1326
sg10
(g25
g12
Ntp1327
Rp1328
(dp1329
g31
I1
sg16
g275
sg125
g128
sg134
(lp1330
sg29
S'auto_2207'
p1331
sg32
(itheano.gof.utils
scratchpad
p1332
(dp1333
g35
(lp1334
(lp1335
(g38
I42
g39
S'prediction = p_1.argmax(axis=1,keepdims=True)'
p1336
tp1337
aasbsg42
g10
(g136
g12
Ntp1338
Rp1339
(dp1340
g8
(lp1341
g907
ag1203
asg125
g128
sg149
(lp1342
g10
(g25
g12
Ntp1343
Rp1344
(dp1345
g31
I0
sg16
g259
sg125
g128
sg134
(lp1346
sg29
S'auto_2206'
p1347
sg32
(itheano.gof.utils
scratchpad
p1348
(dp1349
g35
(lp1350
g265
asbsg42
g1339
sg43
g10
(g44
g12
Ntp1351
Rp1352
(dp1353
g48
(I00
tp1354
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsbag1328
asg32
(itheano.gof.utils
scratchpad
p1355
(dp1356
bsg186
(dp1357
sg188
g327
sbsg43
g10
(g44
g12
Ntp1358
Rp1359
(dp1360
g48
g309
sg50
g299
sg52
g235
sg59
I00
sg16
Nsbsb(g849
tp1361
sg1344
(g849
tp1362
sg10
(g25
g12
Ntp1363
Rp1364
(dp1365
g31
I0
sg16
Nsg125
g128
sg134
(lp1366
sg29
S'auto_2201'
p1367
sg32
(itheano.gof.utils
scratchpad
p1368
(dp1369
g35
(lp1370
(lp1371
(g38
I40
g39
S'p_1 = 1/(1+T.exp(-o))'
p1372
tp1373
aasbsg42
g10
(g136
g12
Ntp1374
Rp1375
(dp1376
g8
(lp1377
g539
asg125
g128
sg149
(lp1378
g1364
asg32
(itheano.gof.utils
scratchpad
p1379
(dp1380
bsg186
(dp1381
sg188
g947
sbsg43
g10
(g44
g12
Ntp1382
Rp1383
(dp1384
g48
(I00
I00
tp1385
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsb(g849
g871
tp1386
sg747
(g849
g871
tp1387
sg226
(g1042
tp1388
sg10
(g224
g12
Ntp1389
Rp1390
(dp1391
g29
S'auto_2229'
p1392
sg31
Nsg32
(itheano.gof.utils
scratchpad
p1393
(dp1394
g243
Nsbsg16
Nsg43
g10
(g44
g12
Ntp1395
Rp1396
(dp1397
g48
(tsg50
S'int8'
p1398
sg52
g1017
sg59
I00
sg16
Nsbsg134
(lp1399
sg248
g71
(g72
(I0
tp1400
g74
tp1401
Rp1402
(I1
(tg1017
I00
g1024
tp1403
bsb(tsg10
(g25
g12
Ntp1404
Rp1405
(dp1406
g31
I0
sg16
Nsg125
g128
sg134
(lp1407
sg29
S'auto_2273'
p1408
sg32
(itheano.gof.utils
scratchpad
p1409
(dp1410
g35
(lp1411
sbsg42
g10
(g136
g12
Ntp1412
Rp1413
(dp1414
g8
(lp1415
g907
ag726
asg125
g128
sg149
(lp1416
g1405
asg32
(itheano.gof.utils
scratchpad
p1417
(dp1418
bsg186
(dp1419
sg188
g800
sbsg43
g10
(g44
g12
Ntp1420
Rp1421
(dp1422
g48
(I00
I00
tp1423
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsb(g849
g871
tp1424
sg595
(g849
g1042
tp1425
sg539
(g849
g871
tp1426
sg931
(g849
g871
tp1427
sg1238
(g849
g871
tp1428
sg10
(g25
g12
Ntp1429
Rp1430
(dp1431
g31
I0
sg16
Nsg125
g128
sg134
(lp1432
sg29
S'auto_2233'
p1433
sg32
(itheano.gof.utils
scratchpad
p1434
(dp1435
g35
(lp1436
sbsg42
g10
(g136
g12
Ntp1437
Rp1438
(dp1439
g8
(lp1440
g10
(g25
g12
Ntp1441
Rp1442
(dp1443
g31
I0
sg16
Nsg125
g128
sg134
(lp1444
sg29
S'auto_2232'
p1445
sg32
(itheano.gof.utils
scratchpad
p1446
(dp1447
g35
(lp1448
sbsg42
g10
(g136
g12
Ntp1449
Rp1450
(dp1451
g8
(lp1452
g1006
asg125
g128
sg149
(lp1453
g1442
asg32
(itheano.gof.utils
scratchpad
p1454
(dp1455
bsg186
(dp1456
sg188
g1299
sbsg43
g10
(g44
g12
Ntp1457
Rp1458
(dp1459
g48
(tsg50
g51
sg52
g56
sg59
I00
sg16
Nsbsbasg125
g128
sg149
(lp1460
g1430
asg32
(itheano.gof.utils
scratchpad
p1461
(dp1462
bsg186
(dp1463
sg188
g10
(g189
g12
Ntp1464
Rp1465
(dp1466
g193
(lp1467
sg195
(lp1468
sg197
(lp1469
I0
aI1
asg199
(tsg200
I00
sg201
g1036
sg206
g207
sbsbsg43
g10
(g44
g12
Ntp1470
Rp1471
(dp1472
g48
(I01
I01
tp1473
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsb(g1042
g1042
tp1474
sg273
(g849
tp1475
sg10
(g224
g12
Ntp1476
Rp1477
(dp1478
g29
S'auto_2215'
p1479
sg31
Nsg32
(itheano.gof.utils
scratchpad
p1480
(dp1481
g243
Nsbsg16
Nsg43
g10
(g44
g12
Ntp1482
Rp1483
(dp1484
g48
(tsg50
S'int8'
p1485
sg52
g1017
sg59
I00
sg16
Nsbsg134
(lp1486
sg248
g71
(g72
(I0
tp1487
g74
tp1488
Rp1489
(I1
(tg1017
I00
g1024
tp1490
bsb(tsg762
(g849
g871
tp1491
sg283
(g849
g1042
tp1492
sg1442
(tsg494
(g1042
g1042
tp1493
sg10
(g25
g12
Ntp1494
Rp1495
(dp1496
g31
I0
sg16
Nsg125
g128
sg134
(lp1497
sg29
S'auto_2219'
p1498
sg32
(itheano.gof.utils
scratchpad
p1499
(dp1500
g35
(lp1501
sbsg42
g10
(g136
g12
Ntp1502
Rp1503
(dp1504
g8
(lp1505
g10
(g25
g12
Ntp1506
Rp1507
(dp1508
g31
I0
sg16
Nsg125
g128
sg134
(lp1509
sg29
S'auto_2218'
p1510
sg32
(itheano.gof.utils
scratchpad
p1511
(dp1512
g35
(lp1513
sbsg42
g10
(g136
g12
Ntp1514
Rp1515
(dp1516
g8
(lp1517
g1006
asg125
g128
sg149
(lp1518
g1507
asg32
(itheano.gof.utils
scratchpad
p1519
(dp1520
bsg186
(dp1521
sg188
g1299
sbsg43
g10
(g44
g12
Ntp1522
Rp1523
(dp1524
g48
(tsg50
g51
sg52
g56
sg59
I00
sg16
Nsbsbasg125
g128
sg149
(lp1525
g1495
asg32
(itheano.gof.utils
scratchpad
p1526
(dp1527
bsg186
(dp1528
sg188
g10
(g189
g12
Ntp1529
Rp1530
(dp1531
g193
(lp1532
sg195
(lp1533
sg197
(lp1534
I0
aI1
asg199
(tsg200
I00
sg201
g1080
sg206
g207
sbsbsg43
g10
(g44
g12
Ntp1535
Rp1536
(dp1537
g48
(I01
I01
tp1538
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsb(g1042
g1042
tp1539
sg217
(g849
g871
tp1540
sg10
(g25
g12
Ntp1541
Rp1542
(dp1543
g31
I0
sg16
Nsg125
g128
sg134
(lp1544
sg29
S'auto_2246'
p1545
sg32
(itheano.gof.utils
scratchpad
p1546
(dp1547
g35
(lp1548
sbsg42
g10
(g136
g12
Ntp1549
Rp1550
(dp1551
g8
(lp1552
g1268
asg125
g128
sg149
(lp1553
g1542
asg32
(itheano.gof.utils
scratchpad
p1554
(dp1555
bsg186
(dp1556
sg188
g10
(g189
g12
Ntp1557
Rp1558
(dp1559
g193
(lp1560
sg195
(lp1561
sg197
(lp1562
I0
aI1
asg199
(tsg200
I00
sg201
(g17
g17
tp1563
sg206
g207
sbsbsg43
g784
sb(g1042
g1042
tp1564
sg1507
(tsg10
(g25
g12
Ntp1565
Rp1566
(dp1567
g31
I0
sg16
Nsg125
g128
sg134
(lp1568
sg29
S'auto_2241'
p1569
sg32
(itheano.gof.utils
scratchpad
p1570
(dp1571
g35
(lp1572
sbsg42
g10
(g136
g12
Ntp1573
Rp1574
(dp1575
g8
(lp1576
g1179
asg125
g128
sg149
(lp1577
g1566
asg32
(itheano.gof.utils
scratchpad
p1578
(dp1579
bsg186
(dp1580
sg188
g1299
sbsg43
g10
(g44
g12
Ntp1581
Rp1582
(dp1583
g48
(I01
I01
tp1584
sg50
g51
sg52
g56
sg59
I00
sg16
Nsbsb(g1042
g1042
tp1585
sg152
(g849
g871
tp1586
sg132
(g849
g10
(g25
g12
Ntp1587
Rp1588
(dp1589
g29
S'auto_2211'
p1590
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1591
(dp1592
g35
(lp1593
sbsg16
Nsg42
g10
(g136
g12
Ntp1594
Rp1595
(dp1596
g8
(lp1597
g132
asg32
(itheano.gof.utils
scratchpad
p1598
(dp1599
bsg149
(lp1600
g1588
asg188
g10
(g862
g12
Ntp1601
Rp1602
(dp1603
g866
I1
sg206
g207
sbsbsg43
g868
sbtp1604
ssS'lscalar_one'
p1605
g1042
sS'shape_of_reverse_index'
p1606
(dp1607
g1042
g399
((lp1608
g226
ag283
ag1179
ag1059
ag726
ag1203
ag625
ag1495
ag1156
ag595
ag994
ag494
ag1542
ag1283
ag1566
ag1430
ag160
ag774
atp1609
Rp1610
sg994
g399
((lp1611
tp1612
Rp1613
sg1059
g399
((lp1614
tp1615
Rp1616
sg1117
g399
((lp1617
tp1618
Rp1619
sg1088
g399
((lp1620
tp1621
Rp1622
sg919
g399
((lp1623
tp1624
Rp1625
sg1179
g399
((lp1626
tp1627
Rp1628
sg1566
g399
((lp1629
tp1630
Rp1631
sg1226
g399
((lp1632
tp1633
Rp1634
sg889
g399
((lp1635
g142
atp1636
Rp1637
sg1283
g399
((lp1638
tp1639
Rp1640
sg871
g399
((lp1641
g919
ag1364
ag217
ag747
ag711
ag1405
ag539
ag1226
ag931
ag1238
ag1117
ag1088
ag907
ag152
ag762
ag142
atp1642
Rp1643
sg1364
g399
((lp1644
tp1645
Rp1646
sg1390
g399
((lp1647
tp1648
Rp1649
sg1542
g399
((lp1650
tp1651
Rp1652
sg595
g399
((lp1653
tp1654
Rp1655
sg849
g399
((lp1656
g711
ag907
ag625
ag1088
ag1117
ag919
ag283
ag1226
ag1344
ag1328
ag1364
ag747
ag595
ag539
ag931
ag1238
ag152
ag1405
ag762
ag257
ag217
ag273
ag132
atp1657
Rp1658
sg1477
g399
((lp1659
tp1660
Rp1661
sg1238
g399
((lp1662
tp1663
Rp1664
sg1430
g399
((lp1665
tp1666
Rp1667
sg1405
g399
((lp1668
tp1669
Rp1670
sg494
g399
((lp1671
tp1672
Rp1673
sg762
g399
((lp1674
tp1675
Rp1676
sg1588
g399
((lp1677
g132
atp1678
Rp1679
sg539
g399
((lp1680
tp1681
Rp1682
sg625
g399
((lp1683
tp1684
Rp1685
sg1495
g399
((lp1686
tp1687
Rp1688
sg1328
g399
((lp1689
tp1690
Rp1691
ssbsS'apply_nodes'
p1692
g399
((lp1693
g156
ag172
ag138
ag278
ag221
atp1694
Rp1695
sS'variables'
p1696
g399
((lp1697
g142
ag176
ag152
ag160
ag226
ag283
ag257
ag217
ag273
ag132
atp1698
Rp1699
sS'_features'
p1700
(lp1701
g10
(ctheano.gof.toolbox
ReplaceValidate
p1702
g12
Ntp1703
Rp1704
(dp1705
S'fail_validate'
p1706
I00
sS'_nodes_removed'
p1707
g399
((lp1708
tp1709
Rp1710
sba(itheano.compile.function_module
Supervisor
p1711
(dp1712
S'protected'
p1713
(lp1714
g132
ag142
ag176
asbag10
(ctheano.gof.toolbox
PreserveVariableAttributes
p1715
g12
Ntp1716
Rp1717
ag394
ag705
ag436
asbsg149
g10
(ctheano.compile.io
SymbolicOutput
p1718
g12
Ntp1719
Rp1720
(dp1721
g24
g10
(g25
g12
Ntp1722
Rp1723
(dp1724
g29
S'auto_2191'
p1725
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1726
(dp1727
g35
g601
sbsg16
Nsg42
g10
(g136
g12
Ntp1728
Rp1729
(dp1730
g8
(lp1731
g10
(g25
g12
Ntp1732
Rp1733
(dp1734
g29
S'auto_2190'
p1735
sg31
I1
sg32
(itheano.gof.utils
scratchpad
p1736
(dp1737
g35
g1334
sbsg16
g275
sg42
g10
(g136
g12
Ntp1738
Rp1739
(dp1740
g8
(lp1741
g10
(g25
g12
Ntp1742
Rp1743
(dp1744
g29
S'auto_2188'
p1745
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1746
(dp1747
g35
g1232
sbsg16
Nsg42
g10
(g136
g12
Ntp1748
Rp1749
(dp1750
g8
(lp1751
g10
(g25
g12
Ntp1752
Rp1753
(dp1754
g29
S'auto_2180'
p1755
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1756
(dp1757
g35
(lp1758
(lp1759
(g38
I40
g39
S'p_1 = 1/(1+T.exp(-o))'
p1760
tp1761
aasbsg16
Nsg42
g10
(g136
g12
Ntp1762
Rp1763
(dp1764
g8
(lp1765
g10
(g224
g12
Ntp1766
Rp1767
(dp1768
g29
S'auto_19'
p1769
sg31
Nsg32
(itheano.gof.utils
scratchpad
p1770
(dp1771
g243
Nsbsg16
NsS'cached'
p1772
I01
sg43
g1012
sg248
g1023
sbasg32
(itheano.gof.utils
scratchpad
p1773
(dp1774
bsg149
(lp1775
g1753
asg188
g10
(g189
g12
Ntp1776
Rp1777
(dp1778
g193
(lp1779
sg195
(lp1780
sg197
(lp1781
I0
aI1
asg199
(tsg200
I00
sg201
(g17
g17
tp1782
sg206
g207
sbsbsg43
g10
(g44
g12
Ntp1783
Rp1784
(dp1785
g48
(I01
I01
tp1786
sg50
g1014
sg52
g1017
sg59
I00
sg16
Nsbsbag10
(g25
g12
Ntp1787
Rp1788
(dp1789
g29
S'auto_2187'
p1790
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1791
(dp1792
g35
g1244
sbsg16
Nsg42
g10
(g136
g12
Ntp1793
Rp1794
(dp1795
g8
(lp1796
g10
(g25
g12
Ntp1797
Rp1798
(dp1799
g29
S'auto_2181'
p1800
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1801
(dp1802
g35
g1185
sbsg16
Nsg42
g10
(g136
g12
Ntp1803
Rp1804
(dp1805
g8
(lp1806
g1767
asg32
(itheano.gof.utils
scratchpad
p1807
(dp1808
bsg149
(lp1809
g1798
asg188
g1195
sbsg43
g1168
sbag10
(g25
g12
Ntp1810
Rp1811
(dp1812
g29
S'auto_2186'
p1813
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1814
(dp1815
g35
g753
sbsg16
Nsg42
g10
(g136
g12
Ntp1816
Rp1817
(dp1818
g8
(lp1819
g10
(g25
g12
Ntp1820
Rp1821
(dp1822
g29
S'auto_2185'
p1823
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1824
(dp1825
g35
g1370
sbsg16
Nsg42
g10
(g136
g12
Ntp1826
Rp1827
(dp1828
g8
(lp1829
g10
(g25
g12
Ntp1830
Rp1831
(dp1832
g29
S'auto_2184'
p1833
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1834
(dp1835
g35
g545
sbsg16
Nsg42
g10
(g136
g12
Ntp1836
Rp1837
(dp1838
g8
(lp1839
g10
(g25
g12
Ntp1840
Rp1841
(dp1842
g29
S'auto_2182'
p1843
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1844
(dp1845
g35
g1094
sbsg16
Nsg42
g10
(g136
g12
Ntp1846
Rp1847
(dp1848
g8
(lp1849
g27
ag88
asg32
(itheano.gof.utils
scratchpad
p1850
(dp1851
bsg149
(lp1852
g1841
asg188
g1108
sbsg43
g1111
sbag10
(g25
g12
Ntp1853
Rp1854
(dp1855
g29
S'auto_2183'
p1856
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1857
(dp1858
g35
g500
sbsg16
Nsg42
g10
(g136
g12
Ntp1859
Rp1860
(dp1861
g8
(lp1862
g116
asg32
(itheano.gof.utils
scratchpad
p1863
(dp1864
bsg149
(lp1865
g1854
asg188
g510
sbsg43
g516
sbasg32
(itheano.gof.utils
scratchpad
p1866
(dp1867
bsg149
(lp1868
g1831
asg188
g558
sbsg43
g573
sbasg32
(itheano.gof.utils
scratchpad
p1869
(dp1870
bsg149
(lp1871
g1821
asg188
g947
sbsg43
g1383
sbasg32
(itheano.gof.utils
scratchpad
p1872
(dp1873
bsg149
(lp1874
g1811
asg188
g822
sbsg43
g837
sbasg32
(itheano.gof.utils
scratchpad
p1875
(dp1876
bsg149
(lp1877
g1788
asg188
g558
sbsg43
g1254
sbasg32
(itheano.gof.utils
scratchpad
p1878
(dp1879
bsg149
(lp1880
g1743
asg188
g1136
sbsg43
g1262
sbag10
(g224
g12
Ntp1881
Rp1882
(dp1883
g29
S'auto_93'
p1884
sg31
Nsg32
(itheano.gof.utils
scratchpad
p1885
(dp1886
g243
g1210
sbsg16
Nsg1772
I01
sg43
g1212
sg248
g1219
sbasg32
(itheano.gof.utils
scratchpad
p1887
(dp1888
bsg149
(lp1889
g10
(g25
g12
Ntp1890
Rp1891
(dp1892
g29
S'auto_2189'
p1893
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1894
(dp1895
g35
g1350
sbsg16
g259
sg42
g1739
sg43
g1352
sbag1733
asg188
g327
sbsg43
g1359
sbasg32
(itheano.gof.utils
scratchpad
p1896
(dp1897
bsg149
(lp1898
g1723
asg188
g611
sbsg43
g617
sbsg20
I00
sbsS'on_unused_input'
p1899
NsS'accept_inplace'
p1900
I00
sS'mode'
p1901
g10
(ctheano.compile.mode
Mode
p1902
g12
Ntp1903
Rp1904
(S'cvm'
p1905
g10
(ctheano.gof.optdb
Query
p1906
g12
Ntp1907
Rp1908
(dp1909
g16
S'OPT_FAST_RUN'
p1910
sS'require'
p1911
g10
(g411
g12
Ntp1912
Rp1913
(dp1914
g415
g10
(g416
g12
Ntp1915
Rp1916
(lp1917
g1916
ag1916
absg420
(dp1918
sbsS'subquery'
p1919
(dp1920
sS'position_cutoff'
p1921
NsS'exclude'
p1922
g10
(g411
g12
Ntp1923
Rp1924
(dp1925
g415
g10
(g416
g12
Ntp1926
Rp1927
(lp1928
g1927
ag1927
absg420
(dp1929
sbsS'include'
p1930
g10
(g411
g12
Ntp1931
Rp1932
(dp1933
g415
g10
(g416
g12
Ntp1934
Rp1935
(lp1936
g10
(g416
g12
Ntp1937
Rp1938
(lp1939
g1935
ag1935
aS'fast_run'
p1940
abag1938
absg420
(dp1941
g1940
g1938
ssbsS'extra_optimizations'
p1942
(lp1943
sbtp1944
bstp1945
Rp1946
(lp1947
g10
(g65
g12
Ntp1948
Rp1949
(dp1950
S'provided'
p1951
I0
sg16
g17
sS'required'
p1952
I01
sg69
(lp1953
Nasg22
I00
sg21
I00
sg80
I00
sg43
g46
sg61
Nsbag10
(g65
g12
Ntp1954
Rp1955
(dp1956
g1951
I0
sg16
Nsg1952
I00
sg69
g70
sg22
I01
sg21
I00
sg80
I00
sg43
g82
sg61
Nsbag10
(g65
g12
Ntp1957
Rp1958
(dp1959
g1951
I0
sg16
Nsg1952
I00
sg69
g104
sg22
I01
sg21
I00
sg80
I00
sg43
g111
sg61
Nsba(lp1960
Nag76
ag107
atp1961
Rp1962
sg74
g116
sS'prediction'
p1963
g10
(g25
g12
Ntp1964
Rp1965
(dp1966
g29
S'auto_96'
p1967
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1968
(dp1969
g35
g601
sbsg16
Nsg42
g10
(g136
g12
Ntp1970
Rp1971
(dp1972
g8
(lp1973
g10
(g25
g12
Ntp1974
Rp1975
(dp1976
g29
S'auto_95'
p1977
sg31
I1
sg32
(itheano.gof.utils
scratchpad
p1978
(dp1979
g35
g1334
sbsg16
g275
sg42
g10
(g136
g12
Ntp1980
Rp1981
(dp1982
g8
(lp1983
g10
(g25
g12
Ntp1984
Rp1985
(dp1986
g29
S'auto_31'
p1987
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1988
(dp1989
g35
g1232
sbsg16
Nsg42
g10
(g136
g12
Ntp1990
Rp1991
(dp1992
g8
(lp1993
g10
(g25
g12
Ntp1994
Rp1995
(dp1996
g29
S'auto_30'
p1997
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p1998
(dp1999
g35
g1758
sbsg16
Nsg42
g10
(g136
g12
Ntp2000
Rp2001
(dp2002
g8
(lp2003
g1767
asg32
(itheano.gof.utils
scratchpad
p2004
(dp2005
bsg149
(lp2006
g1995
asg188
g1777
sbsg43
g1784
sbag10
(g25
g12
Ntp2007
Rp2008
(dp2009
g29
S'auto_24'
p2010
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p2011
(dp2012
g35
g1244
sbsg16
Nsg42
g10
(g136
g12
Ntp2013
Rp2014
(dp2015
g8
(lp2016
g10
(g25
g12
Ntp2017
Rp2018
(dp2019
g29
S'auto_23'
p2020
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p2021
(dp2022
g35
g1185
sbsg16
Nsg42
g10
(g136
g12
Ntp2023
Rp2024
(dp2025
g8
(lp2026
g1767
asg32
(itheano.gof.utils
scratchpad
p2027
(dp2028
bsg149
(lp2029
g2018
asg188
g1195
sbsg43
g1168
sbag10
(g25
g12
Ntp2030
Rp2031
(dp2032
g29
S'auto_18'
p2033
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p2034
(dp2035
g35
g753
sbsg16
Nsg42
g10
(g136
g12
Ntp2036
Rp2037
(dp2038
g8
(lp2039
g10
(g25
g12
Ntp2040
Rp2041
(dp2042
g29
S'auto_15'
p2043
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p2044
(dp2045
g35
g1370
sbsg16
Nsg42
g10
(g136
g12
Ntp2046
Rp2047
(dp2048
g8
(lp2049
g10
(g25
g12
Ntp2050
Rp2051
(dp2052
g29
S'auto_12'
p2053
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p2054
(dp2055
g35
g545
sbsg16
Nsg42
g10
(g136
g12
Ntp2056
Rp2057
(dp2058
g8
(lp2059
g10
(g25
g12
Ntp2060
Rp2061
(dp2062
g29
S'auto_7'
p2063
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p2064
(dp2065
g35
g1094
sbsg16
Nsg42
g10
(g136
g12
Ntp2066
Rp2067
(dp2068
g8
(lp2069
g27
ag88
asg32
(itheano.gof.utils
scratchpad
p2070
(dp2071
bsg149
(lp2072
g2061
asg188
g1108
sbsg43
g1111
sbag10
(g25
g12
Ntp2073
Rp2074
(dp2075
g29
S'auto_11'
p2076
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p2077
(dp2078
g35
g500
sbsg16
Nsg42
g10
(g136
g12
Ntp2079
Rp2080
(dp2081
g8
(lp2082
g116
asg32
(itheano.gof.utils
scratchpad
p2083
(dp2084
bsg149
(lp2085
g2074
asg188
g510
sbsg43
g516
sbasg32
(itheano.gof.utils
scratchpad
p2086
(dp2087
bsg149
(lp2088
g2051
asg188
g558
sbsg43
g573
sbasg32
(itheano.gof.utils
scratchpad
p2089
(dp2090
bsg149
(lp2091
g2041
asg188
g947
sbsg43
g1383
sbasg32
(itheano.gof.utils
scratchpad
p2092
(dp2093
bsg149
(lp2094
g2031
asg188
g822
sbsg43
g837
sbasg32
(itheano.gof.utils
scratchpad
p2095
(dp2096
bsg149
(lp2097
g2008
asg188
g558
sbsg43
g1254
sbasg32
(itheano.gof.utils
scratchpad
p2098
(dp2099
bsg149
(lp2100
g1985
asg188
g1136
sbsg43
g1262
sbag1882
asg32
(itheano.gof.utils
scratchpad
p2101
(dp2102
bsg149
(lp2103
g10
(g25
g12
Ntp2104
Rp2105
(dp2106
g29
S'auto_94'
p2107
sg31
I0
sg32
(itheano.gof.utils
scratchpad
p2108
(dp2109
g35
g1350
sbsg16
g259
sg42
g1981
sg43
g1352
sbag1975
asg188
g327
sbsg43
g1359
sbasg32
(itheano.gof.utils
scratchpad
p2110
(dp2111
bsg149
(lp2112
g1965
asg188
g611
sbsg43
g617
sbsS'w'
p2113
g88
s.